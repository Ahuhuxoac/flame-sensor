CCS PCM C Compiler, Version 5.049, 5967               16-Jun-22 22:41

               Filename:   D:\Document\QUYET3.2\BaoChay\bao_chay\main.lst

               ROM used:   1380 words (17%)
                           Largest free fragment is 2048
               RAM used:   26 (7%) at main() level
                           41 (11%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   421
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0056:  DATA CC,37
0057:  DATA 61,32
0058:  DATA 69,37
0059:  DATA 67,17
005A:  DATA 2E,17
005B:  DATA 00,00
005C:  DATA 0C,00
005D:  DATA 4E,34
005E:  DATA E9,32
005F:  DATA 74,10
0060:  DATA E4,37
0061:  DATA 3A,10
0062:  DATA 25,32
0063:  DATA 00,00
0064:  DATA 21,10
0065:  DATA C3,20
0066:  DATA 4E,10
0067:  DATA C2,20
0068:  DATA 4F,10
0069:  DATA 54,29
006A:  DATA 49,10
006B:  DATA 21,00
*
01C1:  MOVF   0B,W
01C2:  MOVWF  33
01C3:  BCF    0B.7
01C4:  BSF    03.5
01C5:  BSF    03.6
01C6:  BSF    0C.7
01C7:  BSF    0C.0
01C8:  NOP
01C9:  NOP
01CA:  BCF    03.5
01CB:  BCF    03.6
01CC:  BTFSC  33.7
01CD:  BSF    0B.7
01CE:  BSF    03.6
01CF:  MOVF   0C,W
01D0:  ANDLW  7F
01D1:  BTFSC  03.2
01D2:  GOTO   215
01D3:  BCF    03.6
01D4:  MOVWF  33
01D5:  BSF    03.6
01D6:  MOVF   0D,W
01D7:  BCF    03.6
01D8:  MOVWF  34
01D9:  BSF    03.6
01DA:  MOVF   0F,W
01DB:  BCF    03.6
01DC:  MOVWF  35
01DD:  MOVF   33,W
01DE:  MOVWF  39
01DF:  CALL   195
01E0:  MOVF   34,W
01E1:  BSF    03.6
01E2:  MOVWF  0D
01E3:  BCF    03.6
01E4:  MOVF   35,W
01E5:  BSF    03.6
01E6:  MOVWF  0F
01E7:  BCF    03.6
01E8:  MOVF   0B,W
01E9:  MOVWF  36
01EA:  BCF    0B.7
01EB:  BSF    03.5
01EC:  BSF    03.6
01ED:  BSF    0C.7
01EE:  BSF    0C.0
01EF:  NOP
01F0:  NOP
01F1:  BCF    03.5
01F2:  BCF    03.6
01F3:  BTFSC  36.7
01F4:  BSF    0B.7
01F5:  BSF    03.6
01F6:  RLF    0C,W
01F7:  RLF    0E,W
01F8:  ANDLW  7F
01F9:  BTFSC  03.2
01FA:  GOTO   215
01FB:  BCF    03.6
01FC:  MOVWF  33
01FD:  BSF    03.6
01FE:  MOVF   0D,W
01FF:  BCF    03.6
0200:  MOVWF  34
0201:  BSF    03.6
0202:  MOVF   0F,W
0203:  BCF    03.6
0204:  MOVWF  35
0205:  MOVF   33,W
0206:  MOVWF  39
0207:  CALL   195
0208:  MOVF   34,W
0209:  BSF    03.6
020A:  MOVWF  0D
020B:  BCF    03.6
020C:  MOVF   35,W
020D:  BSF    03.6
020E:  MOVWF  0F
020F:  INCF   0D,F
0210:  BTFSC  03.2
0211:  INCF   0F,F
0212:  BCF    03.6
0213:  GOTO   1C1
0214:  BSF    03.6
0215:  BCF    03.6
0216:  RETURN
0217:  MOVLW  8E
0218:  MOVWF  77
0219:  MOVF   36,W
021A:  MOVWF  78
021B:  MOVF   35,W
021C:  MOVWF  79
021D:  CLRF   7A
021E:  MOVF   78,F
021F:  BTFSS  03.2
0220:  GOTO   22B
0221:  MOVF   79,W
0222:  MOVWF  78
0223:  CLRF   79
0224:  MOVLW  08
0225:  SUBWF  77,F
0226:  MOVF   78,F
0227:  BTFSS  03.2
0228:  GOTO   22B
0229:  CLRF   77
022A:  GOTO   233
022B:  BCF    03.0
022C:  BTFSC  78.7
022D:  GOTO   232
022E:  RLF    79,F
022F:  RLF    78,F
0230:  DECF   77,F
0231:  GOTO   22B
0232:  BCF    78.7
0233:  BCF    0A.3
0234:  BCF    0A.4
0235:  GOTO   49F (RETURN)
0236:  MOVF   35,W
0237:  BTFSC  03.2
0238:  GOTO   2FB
0239:  MOVWF  41
023A:  MOVF   39,W
023B:  BTFSC  03.2
023C:  GOTO   2FB
023D:  SUBWF  41,F
023E:  BTFSS  03.0
023F:  GOTO   245
0240:  MOVLW  7F
0241:  ADDWF  41,F
0242:  BTFSC  03.0
0243:  GOTO   2FB
0244:  GOTO   24B
0245:  MOVLW  81
0246:  SUBWF  41,F
0247:  BTFSS  03.0
0248:  GOTO   2FB
0249:  BTFSC  03.2
024A:  GOTO   2FB
024B:  MOVF   41,W
024C:  MOVWF  77
024D:  CLRF   78
024E:  CLRF   79
024F:  CLRF   7A
0250:  CLRF   40
0251:  MOVF   36,W
0252:  MOVWF  3F
0253:  BSF    3F.7
0254:  MOVF   37,W
0255:  MOVWF  3E
0256:  MOVF   38,W
0257:  MOVWF  3D
0258:  MOVLW  19
0259:  MOVWF  41
025A:  MOVF   3C,W
025B:  SUBWF  3D,F
025C:  BTFSC  03.0
025D:  GOTO   26E
025E:  MOVLW  01
025F:  SUBWF  3E,F
0260:  BTFSC  03.0
0261:  GOTO   26E
0262:  SUBWF  3F,F
0263:  BTFSC  03.0
0264:  GOTO   26E
0265:  SUBWF  40,F
0266:  BTFSC  03.0
0267:  GOTO   26E
0268:  INCF   40,F
0269:  INCF   3F,F
026A:  INCF   3E,F
026B:  MOVF   3C,W
026C:  ADDWF  3D,F
026D:  GOTO   2A0
026E:  MOVF   3B,W
026F:  SUBWF  3E,F
0270:  BTFSC  03.0
0271:  GOTO   289
0272:  MOVLW  01
0273:  SUBWF  3F,F
0274:  BTFSC  03.0
0275:  GOTO   289
0276:  SUBWF  40,F
0277:  BTFSC  03.0
0278:  GOTO   289
0279:  INCF   40,F
027A:  INCF   3F,F
027B:  MOVF   3B,W
027C:  ADDWF  3E,F
027D:  MOVF   3C,W
027E:  ADDWF  3D,F
027F:  BTFSS  03.0
0280:  GOTO   2A0
0281:  INCF   3E,F
0282:  BTFSS  03.2
0283:  GOTO   2A0
0284:  INCF   3F,F
0285:  BTFSS  03.2
0286:  GOTO   2A0
0287:  INCF   40,F
0288:  GOTO   2A0
0289:  MOVF   3A,W
028A:  IORLW  80
028B:  SUBWF  3F,F
028C:  BTFSC  03.0
028D:  GOTO   29F
028E:  MOVLW  01
028F:  SUBWF  40,F
0290:  BTFSC  03.0
0291:  GOTO   29F
0292:  INCF   40,F
0293:  MOVF   3A,W
0294:  IORLW  80
0295:  ADDWF  3F,F
0296:  MOVF   3B,W
0297:  ADDWF  3E,F
0298:  BTFSS  03.0
0299:  GOTO   27D
029A:  INCF   3F,F
029B:  BTFSS  03.2
029C:  GOTO   27D
029D:  INCF   40,F
029E:  GOTO   27D
029F:  BSF    7A.0
02A0:  DECFSZ 41,F
02A1:  GOTO   2A3
02A2:  GOTO   2AE
02A3:  BCF    03.0
02A4:  RLF    3D,F
02A5:  RLF    3E,F
02A6:  RLF    3F,F
02A7:  RLF    40,F
02A8:  BCF    03.0
02A9:  RLF    7A,F
02AA:  RLF    79,F
02AB:  RLF    78,F
02AC:  RLF    42,F
02AD:  GOTO   25A
02AE:  BTFSS  42.0
02AF:  GOTO   2B6
02B0:  BCF    03.0
02B1:  RRF    78,F
02B2:  RRF    79,F
02B3:  RRF    7A,F
02B4:  RRF    42,F
02B5:  GOTO   2B9
02B6:  DECF   77,F
02B7:  BTFSC  03.2
02B8:  GOTO   2FB
02B9:  BTFSC  42.7
02BA:  GOTO   2E2
02BB:  BCF    03.0
02BC:  RLF    3D,F
02BD:  RLF    3E,F
02BE:  RLF    3F,F
02BF:  RLF    40,F
02C0:  MOVF   3C,W
02C1:  SUBWF  3D,F
02C2:  BTFSC  03.0
02C3:  GOTO   2CE
02C4:  MOVLW  01
02C5:  SUBWF  3E,F
02C6:  BTFSC  03.0
02C7:  GOTO   2CE
02C8:  SUBWF  3F,F
02C9:  BTFSC  03.0
02CA:  GOTO   2CE
02CB:  SUBWF  40,F
02CC:  BTFSS  03.0
02CD:  GOTO   2F1
02CE:  MOVF   3B,W
02CF:  SUBWF  3E,F
02D0:  BTFSC  03.0
02D1:  GOTO   2D9
02D2:  MOVLW  01
02D3:  SUBWF  3F,F
02D4:  BTFSC  03.0
02D5:  GOTO   2D9
02D6:  SUBWF  40,F
02D7:  BTFSS  03.0
02D8:  GOTO   2F1
02D9:  MOVF   3A,W
02DA:  IORLW  80
02DB:  SUBWF  3F,F
02DC:  BTFSC  03.0
02DD:  GOTO   2E2
02DE:  MOVLW  01
02DF:  SUBWF  40,F
02E0:  BTFSS  03.0
02E1:  GOTO   2F1
02E2:  INCF   7A,F
02E3:  BTFSS  03.2
02E4:  GOTO   2F1
02E5:  INCF   79,F
02E6:  BTFSS  03.2
02E7:  GOTO   2F1
02E8:  INCF   78,F
02E9:  BTFSS  03.2
02EA:  GOTO   2F1
02EB:  INCF   77,F
02EC:  BTFSC  03.2
02ED:  GOTO   2FB
02EE:  RRF    78,F
02EF:  RRF    79,F
02F0:  RRF    7A,F
02F1:  MOVF   36,W
02F2:  MOVWF  41
02F3:  MOVF   3A,W
02F4:  XORWF  41,F
02F5:  BTFSS  41.7
02F6:  GOTO   2F9
02F7:  BSF    78.7
02F8:  GOTO   2FF
02F9:  BCF    78.7
02FA:  GOTO   2FF
02FB:  CLRF   77
02FC:  CLRF   78
02FD:  CLRF   79
02FE:  CLRF   7A
02FF:  BCF    0A.3
0300:  BCF    0A.4
0301:  GOTO   4B0 (RETURN)
0302:  MOVLW  8E
0303:  MOVWF  77
0304:  MOVF   33,W
0305:  SUBWF  77,F
0306:  MOVF   34,W
0307:  MOVWF  79
0308:  MOVF   35,W
0309:  MOVWF  78
030A:  BSF    79.7
030B:  MOVF   77,F
030C:  BTFSC  03.2
030D:  GOTO   319
030E:  BCF    03.0
030F:  MOVF   79,F
0310:  BTFSS  03.2
0311:  GOTO   315
0312:  MOVF   78,F
0313:  BTFSC  03.2
0314:  GOTO   319
0315:  RRF    79,F
0316:  RRF    78,F
0317:  DECFSZ 77,F
0318:  GOTO   30E
0319:  BTFSS  34.7
031A:  GOTO   320
031B:  COMF   78,F
031C:  COMF   79,F
031D:  INCF   78,F
031E:  BTFSC  03.2
031F:  INCF   79,F
0320:  BCF    0A.3
0321:  BCF    0A.4
0322:  GOTO   4B9 (RETURN)
0323:  MOVF   0B,W
0324:  MOVWF  34
0325:  BCF    0B.7
0326:  BSF    03.5
0327:  BSF    03.6
0328:  BSF    0C.7
0329:  BSF    0C.0
032A:  NOP
032B:  NOP
032C:  BCF    03.5
032D:  BCF    03.6
032E:  BTFSC  34.7
032F:  BSF    0B.7
0330:  BTFSC  03.0
0331:  GOTO   35A
0332:  BSF    03.6
0333:  MOVF   0C,W
0334:  ANDLW  7F
0335:  BCF    03.6
0336:  MOVWF  34
0337:  BSF    03.6
0338:  MOVF   0D,W
0339:  BCF    03.6
033A:  MOVWF  35
033B:  BSF    03.6
033C:  MOVF   0F,W
033D:  BCF    03.6
033E:  MOVWF  36
033F:  MOVF   34,W
0340:  MOVWF  39
0341:  CALL   195
0342:  MOVF   35,W
0343:  BSF    03.6
0344:  MOVWF  0D
0345:  BCF    03.6
0346:  MOVF   36,W
0347:  BSF    03.6
0348:  MOVWF  0F
0349:  BCF    03.6
034A:  MOVF   0B,W
034B:  MOVWF  37
034C:  BCF    0B.7
034D:  BSF    03.5
034E:  BSF    03.6
034F:  BSF    0C.7
0350:  BSF    0C.0
0351:  NOP
0352:  NOP
0353:  BCF    03.5
0354:  BCF    03.6
0355:  BTFSC  37.7
0356:  BSF    0B.7
0357:  DECFSZ 33,F
0358:  GOTO   35A
0359:  GOTO   379
035A:  BSF    03.6
035B:  RLF    0C,W
035C:  RLF    0E,W
035D:  ANDLW  7F
035E:  BCF    03.6
035F:  MOVWF  34
0360:  BSF    03.6
0361:  MOVF   0D,W
0362:  BCF    03.6
0363:  MOVWF  35
0364:  BSF    03.6
0365:  MOVF   0F,W
0366:  BCF    03.6
0367:  MOVWF  36
0368:  MOVF   34,W
0369:  MOVWF  39
036A:  CALL   195
036B:  MOVF   35,W
036C:  BSF    03.6
036D:  MOVWF  0D
036E:  BCF    03.6
036F:  MOVF   36,W
0370:  BSF    03.6
0371:  MOVWF  0F
0372:  INCF   0D,F
0373:  BTFSC  03.2
0374:  INCF   0F,F
0375:  BCF    03.0
0376:  BCF    03.6
0377:  DECFSZ 33,F
0378:  GOTO   323
0379:  BCF    0A.3
037A:  BCF    0A.4
037B:  GOTO   4EB (RETURN)
037C:  MOVF   3A,W
037D:  CLRF   78
037E:  SUBWF  39,W
037F:  BTFSC  03.0
0380:  GOTO   384
0381:  MOVF   39,W
0382:  MOVWF  77
0383:  GOTO   390
0384:  CLRF   77
0385:  MOVLW  08
0386:  MOVWF  3B
0387:  RLF    39,F
0388:  RLF    77,F
0389:  MOVF   3A,W
038A:  SUBWF  77,W
038B:  BTFSC  03.0
038C:  MOVWF  77
038D:  RLF    78,F
038E:  DECFSZ 3B,F
038F:  GOTO   387
0390:  RETURN
0391:  MOVLW  20
0392:  BTFSS  34.4
0393:  MOVLW  30
0394:  MOVWF  35
0395:  MOVF   33,W
0396:  MOVWF  77
0397:  BTFSS  33.7
0398:  GOTO   3A1
0399:  COMF   77,F
039A:  INCF   77,F
039B:  MOVF   77,W
039C:  MOVWF  33
039D:  MOVLW  2D
039E:  MOVWF  35
039F:  BSF    34.7
03A0:  BSF    34.0
03A1:  MOVF   33,W
03A2:  MOVWF  39
03A3:  MOVLW  64
03A4:  MOVWF  3A
03A5:  CALL   37C
03A6:  MOVF   77,W
03A7:  MOVWF  33
03A8:  MOVLW  30
03A9:  ADDWF  78,W
03AA:  MOVWF  36
03AB:  MOVF   33,W
03AC:  MOVWF  39
03AD:  MOVLW  0A
03AE:  MOVWF  3A
03AF:  CALL   37C
03B0:  MOVLW  30
03B1:  ADDWF  77,W
03B2:  MOVWF  38
03B3:  MOVLW  30
03B4:  ADDWF  78,W
03B5:  MOVWF  37
03B6:  MOVF   35,W
03B7:  MOVWF  77
03B8:  MOVLW  30
03B9:  SUBWF  36,W
03BA:  BTFSC  03.2
03BB:  GOTO   3C0
03BC:  BSF    34.1
03BD:  BTFSC  34.7
03BE:  BSF    34.2
03BF:  GOTO   3D4
03C0:  MOVF   35,W
03C1:  MOVWF  36
03C2:  MOVLW  20
03C3:  MOVWF  35
03C4:  MOVLW  30
03C5:  SUBWF  37,W
03C6:  BTFSC  03.2
03C7:  GOTO   3CC
03C8:  BSF    34.0
03C9:  BTFSC  34.7
03CA:  BSF    34.1
03CB:  GOTO   3D4
03CC:  BTFSS  03.2
03CD:  BSF    34.0
03CE:  BTFSS  03.2
03CF:  GOTO   3D4
03D0:  MOVF   36,W
03D1:  MOVWF  37
03D2:  MOVLW  20
03D3:  MOVWF  36
03D4:  BTFSC  34.2
03D5:  GOTO   3DB
03D6:  BTFSC  34.1
03D7:  GOTO   3DE
03D8:  BTFSC  34.0
03D9:  GOTO   3E1
03DA:  GOTO   3E4
03DB:  MOVF   35,W
03DC:  MOVWF  39
03DD:  CALL   195
03DE:  MOVF   36,W
03DF:  MOVWF  39
03E0:  CALL   195
03E1:  MOVF   37,W
03E2:  MOVWF  39
03E3:  CALL   195
03E4:  MOVF   38,W
03E5:  MOVWF  39
03E6:  CALL   195
03E7:  BCF    0A.3
03E8:  BCF    0A.4
03E9:  GOTO   4F0 (RETURN)
03EA:  MOVF   78,W
03EB:  MOVF   33,W
03EC:  MOVWF  39
03ED:  MOVLW  64
03EE:  MOVWF  3A
03EF:  CALL   37C
03F0:  MOVF   77,W
03F1:  MOVWF  33
03F2:  MOVF   78,W
03F3:  MOVLW  30
03F4:  BTFSS  03.2
03F5:  GOTO   3FD
03F6:  BTFSS  34.1
03F7:  GOTO   404
03F8:  BTFSC  34.3
03F9:  GOTO   404
03FA:  BTFSC  34.4
03FB:  MOVLW  20
03FC:  GOTO   400
03FD:  BCF    34.3
03FE:  BCF    34.4
03FF:  BSF    34.0
0400:  ADDWF  78,F
0401:  MOVF   78,W
0402:  MOVWF  39
0403:  CALL   195
0404:  MOVF   33,W
0405:  MOVWF  39
0406:  MOVLW  0A
0407:  MOVWF  3A
0408:  CALL   37C
0409:  MOVF   77,W
040A:  MOVWF  33
040B:  MOVF   78,W
040C:  MOVLW  30
040D:  BTFSS  03.2
040E:  GOTO   415
040F:  BTFSC  34.3
0410:  GOTO   419
0411:  BTFSS  34.0
0412:  GOTO   419
0413:  BTFSC  34.4
0414:  MOVLW  20
0415:  ADDWF  78,F
0416:  MOVF   78,W
0417:  MOVWF  39
0418:  CALL   195
0419:  MOVLW  30
041A:  ADDWF  33,F
041B:  MOVF   33,W
041C:  MOVWF  39
041D:  CALL   195
041E:  BCF    0A.3
041F:  BCF    0A.4
0420:  GOTO   506 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
006C:  MOVLW  3A
006D:  MOVWF  04
006E:  BCF    03.7
006F:  MOVF   00,W
0070:  BTFSC  03.2
0071:  GOTO   07F
0072:  MOVLW  06
0073:  MOVWF  78
0074:  CLRF   77
0075:  DECFSZ 77,F
0076:  GOTO   075
0077:  DECFSZ 78,F
0078:  GOTO   074
0079:  MOVLW  7B
007A:  MOVWF  77
007B:  DECFSZ 77,F
007C:  GOTO   07B
007D:  DECFSZ 00,F
007E:  GOTO   072
007F:  RETURN
....................  
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_E0 
.................... #define LCD_RS_PIN PIN_E1 
.................... #define LCD_RW_PIN PIN_E2 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
.................... #define ADDEEPROM 0x01 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00E7:  BSF    08.4
....................    output_float(LCD_DATA5); 
00E8:  BSF    08.5
....................    output_float(LCD_DATA6); 
00E9:  BSF    08.6
....................    output_float(LCD_DATA7); 
00EA:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00EB:  BCF    03.5
00EC:  BSF    09.2
00ED:  BSF    03.5
00EE:  BCF    09.2
....................    delay_cycles(1); 
00EF:  NOP
....................    lcd_output_enable(1); 
00F0:  BCF    03.5
00F1:  BSF    09.0
00F2:  BSF    03.5
00F3:  BCF    09.0
....................    delay_cycles(1); 
00F4:  NOP
....................    high = lcd_read_nibble(); 
00F5:  BCF    03.5
00F6:  CALL   0AE
00F7:  MOVF   78,W
00F8:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
00F9:  BCF    09.0
00FA:  BSF    03.5
00FB:  BCF    09.0
....................    delay_cycles(1); 
00FC:  NOP
....................    lcd_output_enable(1); 
00FD:  BCF    03.5
00FE:  BSF    09.0
00FF:  BSF    03.5
0100:  BCF    09.0
....................    delay_us(1); 
0101:  GOTO   102
0102:  GOTO   103
0103:  NOP
....................    low = lcd_read_nibble(); 
0104:  BCF    03.5
0105:  CALL   0AE
0106:  MOVF   78,W
0107:  MOVWF  40
....................        
....................    lcd_output_enable(0); 
0108:  BCF    09.0
0109:  BSF    03.5
010A:  BCF    09.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
010B:  BCF    08.4
....................    output_drive(LCD_DATA5); 
010C:  BCF    08.5
....................    output_drive(LCD_DATA6); 
010D:  BCF    08.6
....................    output_drive(LCD_DATA7); 
010E:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
010F:  BCF    03.5
0110:  SWAPF  41,W
0111:  MOVWF  77
0112:  MOVLW  F0
0113:  ANDWF  77,F
0114:  MOVF   77,W
0115:  IORWF  40,W
0116:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00AE:  CLRF   42
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00AF:  BSF    03.5
00B0:  BSF    08.4
00B1:  MOVLW  00
00B2:  BCF    03.5
00B3:  BTFSC  08.4
00B4:  MOVLW  01
00B5:  IORWF  42,F
....................    n |= input(LCD_DATA5) << 1; 
00B6:  BSF    03.5
00B7:  BSF    08.5
00B8:  MOVLW  00
00B9:  BCF    03.5
00BA:  BTFSC  08.5
00BB:  MOVLW  01
00BC:  MOVWF  77
00BD:  BCF    03.0
00BE:  RLF    77,F
00BF:  MOVF   77,W
00C0:  IORWF  42,F
....................    n |= input(LCD_DATA6) << 2; 
00C1:  BSF    03.5
00C2:  BSF    08.6
00C3:  MOVLW  00
00C4:  BCF    03.5
00C5:  BTFSC  08.6
00C6:  MOVLW  01
00C7:  MOVWF  77
00C8:  RLF    77,F
00C9:  RLF    77,F
00CA:  MOVLW  FC
00CB:  ANDWF  77,F
00CC:  MOVF   77,W
00CD:  IORWF  42,F
....................    n |= input(LCD_DATA7) << 3; 
00CE:  BSF    03.5
00CF:  BSF    08.7
00D0:  MOVLW  00
00D1:  BCF    03.5
00D2:  BTFSC  08.7
00D3:  MOVLW  01
00D4:  MOVWF  77
00D5:  RLF    77,F
00D6:  RLF    77,F
00D7:  RLF    77,F
00D8:  MOVLW  F8
00D9:  ANDWF  77,F
00DA:  MOVF   77,W
00DB:  IORWF  42,F
....................     
....................    return(n); 
00DC:  MOVF   42,W
00DD:  MOVWF  78
....................   #else 
00DE:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0080:  BTFSC  41.0
0081:  GOTO   084
0082:  BCF    08.4
0083:  GOTO   085
0084:  BSF    08.4
0085:  BSF    03.5
0086:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0087:  BCF    03.5
0088:  BTFSC  41.1
0089:  GOTO   08C
008A:  BCF    08.5
008B:  GOTO   08D
008C:  BSF    08.5
008D:  BSF    03.5
008E:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
008F:  BCF    03.5
0090:  BTFSC  41.2
0091:  GOTO   094
0092:  BCF    08.6
0093:  GOTO   095
0094:  BSF    08.6
0095:  BSF    03.5
0096:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0097:  BCF    03.5
0098:  BTFSC  41.3
0099:  GOTO   09C
009A:  BCF    08.7
009B:  GOTO   09D
009C:  BSF    08.7
009D:  BSF    03.5
009E:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
009F:  NOP
....................    lcd_output_enable(1); 
00A0:  BCF    03.5
00A1:  BSF    09.0
00A2:  BSF    03.5
00A3:  BCF    09.0
....................    delay_us(2); 
00A4:  MOVLW  03
00A5:  MOVWF  77
00A6:  DECFSZ 77,F
00A7:  GOTO   0A6
....................    lcd_output_enable(0); 
00A8:  BCF    03.5
00A9:  BCF    09.0
00AA:  BSF    03.5
00AB:  BCF    09.0
00AC:  BCF    03.5
00AD:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00DF:  BSF    03.5
00E0:  BCF    09.0
....................    lcd_rs_tris(); 
00E1:  BCF    09.1
....................    lcd_rw_tris(); 
00E2:  BCF    09.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00E3:  BCF    03.5
00E4:  BCF    09.1
00E5:  BSF    03.5
00E6:  BCF    09.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0117:  MOVF   78,W
0118:  MOVWF  40
0119:  BTFSS  40.7
011A:  GOTO   11D
011B:  BSF    03.5
011C:  GOTO   0E7
....................    lcd_output_rs(address); 
011D:  MOVF   3E,F
011E:  BTFSS  03.2
011F:  GOTO   122
0120:  BCF    09.1
0121:  GOTO   123
0122:  BSF    09.1
0123:  BSF    03.5
0124:  BCF    09.1
....................    delay_cycles(1); 
0125:  NOP
....................    lcd_output_rw(0); 
0126:  BCF    03.5
0127:  BCF    09.2
0128:  BSF    03.5
0129:  BCF    09.2
....................    delay_cycles(1); 
012A:  NOP
....................    lcd_output_enable(0); 
012B:  BCF    03.5
012C:  BCF    09.0
012D:  BSF    03.5
012E:  BCF    09.0
....................    lcd_send_nibble(n >> 4); 
012F:  BCF    03.5
0130:  SWAPF  3F,W
0131:  MOVWF  40
0132:  MOVLW  0F
0133:  ANDWF  40,F
0134:  MOVF   40,W
0135:  MOVWF  41
0136:  CALL   080
....................    lcd_send_nibble(n & 0xf); 
0137:  MOVF   3F,W
0138:  ANDLW  0F
0139:  MOVWF  40
013A:  MOVWF  41
013B:  CALL   080
013C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
013D:  MOVLW  28
013E:  MOVWF  34
013F:  MOVLW  0C
0140:  MOVWF  35
0141:  MOVLW  01
0142:  MOVWF  36
0143:  MOVLW  06
0144:  MOVWF  37
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0145:  BCF    09.0
0146:  BSF    03.5
0147:  BCF    09.0
....................    lcd_output_rs(0); 
0148:  BCF    03.5
0149:  BCF    09.1
014A:  BSF    03.5
014B:  BCF    09.1
....................    lcd_output_rw(0); 
014C:  BCF    03.5
014D:  BCF    09.2
014E:  BSF    03.5
014F:  BCF    09.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0150:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0151:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0152:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0153:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0154:  BCF    09.0
....................    lcd_rs_tris(); 
0155:  BCF    09.1
....................    lcd_rw_tris(); 
0156:  BCF    09.2
....................  #endif 
....................      
....................    delay_ms(15); 
0157:  MOVLW  0F
0158:  BCF    03.5
0159:  MOVWF  3A
015A:  CALL   06C
....................    for(i=1;i<=3;++i) 
015B:  MOVLW  01
015C:  MOVWF  33
015D:  MOVF   33,W
015E:  SUBLW  03
015F:  BTFSS  03.0
0160:  GOTO   169
....................    { 
....................        lcd_send_nibble(3); 
0161:  MOVLW  03
0162:  MOVWF  41
0163:  CALL   080
....................        delay_ms(5); 
0164:  MOVLW  05
0165:  MOVWF  3A
0166:  CALL   06C
0167:  INCF   33,F
0168:  GOTO   15D
....................    } 
....................     
....................    lcd_send_nibble(2); 
0169:  MOVLW  02
016A:  MOVWF  41
016B:  CALL   080
....................    delay_ms(5); 
016C:  MOVLW  05
016D:  MOVWF  3A
016E:  CALL   06C
....................    for(i=0;i<=3;++i) 
016F:  CLRF   33
0170:  MOVF   33,W
0171:  SUBLW  03
0172:  BTFSS  03.0
0173:  GOTO   180
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0174:  MOVLW  34
0175:  ADDWF  33,W
0176:  MOVWF  04
0177:  BCF    03.7
0178:  MOVF   00,W
0179:  MOVWF  38
017A:  CLRF   3E
017B:  MOVF   38,W
017C:  MOVWF  3F
017D:  CALL   0DF
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
017E:  INCF   33,F
017F:  GOTO   170
0180:  BCF    0A.3
0181:  BCF    0A.4
0182:  GOTO   452 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0183:  DECFSZ 3B,W
0184:  GOTO   186
0185:  GOTO   189
....................       address=LCD_LINE_TWO; 
0186:  MOVLW  40
0187:  MOVWF  3C
0188:  GOTO   18A
....................    else 
....................       address=0; 
0189:  CLRF   3C
....................       
....................    address+=x-1; 
018A:  MOVLW  01
018B:  SUBWF  3A,W
018C:  ADDWF  3C,F
....................    lcd_send_byte(0,0x80|address); 
018D:  MOVF   3C,W
018E:  IORLW  80
018F:  MOVWF  3D
0190:  CLRF   3E
0191:  MOVF   3D,W
0192:  MOVWF  3F
0193:  CALL   0DF
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0194:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0195:  MOVF   39,W
0196:  XORLW  07
0197:  BTFSC  03.2
0198:  GOTO   1A3
0199:  XORLW  0B
019A:  BTFSC  03.2
019B:  GOTO   1A8
019C:  XORLW  06
019D:  BTFSC  03.2
019E:  GOTO   1B0
019F:  XORLW  02
01A0:  BTFSC  03.2
01A1:  GOTO   1B6
01A2:  GOTO   1BB
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01A3:  MOVLW  01
01A4:  MOVWF  3A
01A5:  MOVWF  3B
01A6:  CALL   183
01A7:  GOTO   1C0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01A8:  CLRF   3E
01A9:  MOVLW  01
01AA:  MOVWF  3F
01AB:  CALL   0DF
....................                      delay_ms(2); 
01AC:  MOVLW  02
01AD:  MOVWF  3A
01AE:  CALL   06C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01AF:  GOTO   1C0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01B0:  MOVLW  01
01B1:  MOVWF  3A
01B2:  MOVLW  02
01B3:  MOVWF  3B
01B4:  CALL   183
01B5:  GOTO   1C0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01B6:  CLRF   3E
01B7:  MOVLW  10
01B8:  MOVWF  3F
01B9:  CALL   0DF
01BA:  GOTO   1C0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01BB:  MOVLW  01
01BC:  MOVWF  3E
01BD:  MOVF   39,W
01BE:  MOVWF  3F
01BF:  CALL   0DF
....................      #endif 
....................    } 
01C0:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int1 turnLed = 0; 
.................... unsigned int8 fixCounter; 
....................  
.................... #INT_EXT 
.................... void ext_isr(void){ 
....................   clear_interrupt(INT_EXT);  // Clear external interrupt flag bit 
*
004F:  BCF    0B.1
....................   turnLed = !turnLed; 
0050:  MOVLW  01
0051:  XORWF  2B,F
0052:  BCF    0B.1
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   02B
.................... } 
....................  
.................... void main() 
*
0421:  MOVF   03,W
0422:  ANDLW  1F
0423:  MOVWF  03
0424:  BCF    2B.0
0425:  MOVLW  FF
0426:  MOVWF  2D
0427:  CLRF   2F
0428:  CLRF   2E
0429:  BSF    03.5
042A:  BSF    1F.0
042B:  BSF    1F.1
042C:  BSF    1F.2
042D:  BCF    1F.3
042E:  MOVLW  07
042F:  MOVWF  1C
0430:  BCF    03.7
.................... { 
....................    setup_timer_2(T2_DIV_BY_16, 155, 1); 
0431:  MOVLW  00
0432:  MOVWF  78
0433:  IORLW  06
0434:  BCF    03.5
0435:  MOVWF  12
0436:  MOVLW  9B
0437:  BSF    03.5
0438:  MOVWF  12
....................    setup_ccp1(CCP_PWM); 
0439:  BCF    03.5
043A:  BCF    2D.2
043B:  MOVF   2D,W
043C:  BSF    03.5
043D:  MOVWF  07
043E:  BCF    03.5
043F:  BCF    07.2
0440:  MOVLW  0C
0441:  MOVWF  17
.................... //!   set_pwm1_duty((int16)312); 
....................     
....................    SETUP_ADC(ADC_CLOCK_DIV_2); 
0442:  BSF    03.5
0443:  BCF    1F.6
0444:  BCF    03.5
0445:  BCF    1F.6
0446:  BCF    1F.7
0447:  BSF    03.5
0448:  BSF    1F.7
0449:  BCF    03.5
044A:  BSF    1F.0
....................    SETUP_ADC_PORTS(AN0); 
044B:  BSF    03.5
044C:  BCF    1F.0
044D:  BSF    1F.1
044E:  BSF    1F.2
044F:  BSF    1F.3
....................    lcd_init(); 
0450:  BCF    03.5
0451:  GOTO   13D
....................     
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
0452:  BSF    03.5
0453:  MOVF   01,W
0454:  ANDLW  C7
0455:  IORLW  28
0456:  MOVWF  01
....................     
....................    if (read_eeprom(ADDEEPROM) > 10) { 
0457:  MOVLW  01
0458:  BCF    03.5
0459:  BSF    03.6
045A:  MOVWF  0D
045B:  BSF    03.5
045C:  BCF    0C.7
045D:  BSF    0C.0
045E:  BCF    03.5
045F:  MOVF   0C,W
0460:  SUBLW  0A
0461:  BTFSC  03.0
0462:  GOTO   467
....................       fixCounter = 0; 
0463:  BCF    03.6
0464:  CLRF   2C
....................    } else { 
0465:  GOTO   470
0466:  BSF    03.6
....................       fixCounter = read_eeprom(ADDEEPROM); 
0467:  MOVLW  01
0468:  MOVWF  0D
0469:  BSF    03.5
046A:  BCF    0C.7
046B:  BSF    0C.0
046C:  BCF    03.5
046D:  MOVF   0C,W
046E:  BCF    03.6
046F:  MOVWF  2C
....................    } 
....................    set_timer0(fixCounter); 
0470:  MOVF   2C,W
0471:  MOVWF  01
....................  
....................    lcd_putc("Loading..."); 
0472:  MOVLW  56
0473:  BSF    03.6
0474:  MOVWF  0D
0475:  MOVLW  00
0476:  MOVWF  0F
0477:  BCF    03.6
0478:  CALL   1C1
....................     
....................    ext_int_edge(H_TO_L); 
0479:  BSF    03.5
047A:  BCF    01.6
....................    clear_interrupt(INT_EXT); // Clear external interrupt flag bit 
047B:  BCF    03.5
047C:  BCF    0B.1
....................    enable_interrupts(INT_EXT); // Enable external interrupt 
047D:  BSF    0B.4
....................    enable_interrupts(GLOBAL);   
047E:  MOVLW  C0
047F:  IORWF  0B,F
....................     
....................    int16 counter = 0; 
0480:  CLRF   31
0481:  CLRF   30
....................     
....................    while(TRUE) 
....................    { 
....................       delay_ms(100); 
0482:  MOVLW  64
0483:  MOVWF  3A
0484:  CALL   06C
....................        
....................       SET_ADC_CHANNEL(0); 
0485:  MOVLW  00
0486:  MOVWF  78
0487:  MOVF   1F,W
0488:  ANDLW  C7
0489:  IORWF  78,W
048A:  MOVWF  1F
....................       delay_us(10); 
048B:  MOVLW  10
048C:  MOVWF  77
048D:  DECFSZ 77,F
048E:  GOTO   48D
048F:  NOP
....................        
....................       signed int8 temp = read_adc() / 2.046; 
0490:  BSF    1F.2
0491:  BTFSC  1F.2
0492:  GOTO   491
0493:  MOVF   1E,W
0494:  MOVWF  7A
0495:  BSF    03.5
0496:  MOVF   1E,W
0497:  BCF    03.5
0498:  MOVWF  33
0499:  MOVF   1E,W
049A:  MOVWF  34
049B:  MOVWF  36
049C:  MOVF   33,W
049D:  MOVWF  35
049E:  GOTO   217
049F:  MOVF   7A,W
04A0:  MOVWF  38
04A1:  MOVF   79,W
04A2:  MOVWF  37
04A3:  MOVF   78,W
04A4:  MOVWF  36
04A5:  MOVF   77,W
04A6:  MOVWF  35
04A7:  MOVLW  AA
04A8:  MOVWF  3C
04A9:  MOVLW  F1
04AA:  MOVWF  3B
04AB:  MOVLW  02
04AC:  MOVWF  3A
04AD:  MOVLW  80
04AE:  MOVWF  39
04AF:  GOTO   236
04B0:  MOVF   7A,W
04B1:  MOVWF  36
04B2:  MOVF   79,W
04B3:  MOVWF  35
04B4:  MOVF   78,W
04B5:  MOVWF  34
04B6:  MOVF   77,W
04B7:  MOVWF  33
04B8:  GOTO   302
04B9:  MOVF   78,W
04BA:  MOVWF  32
....................       fixCounter = get_timer0(); 
04BB:  MOVF   01,W
04BC:  MOVWF  2C
....................       write_eeprom(ADDEEPROM, fixCounter); 
04BD:  MOVF   0B,W
04BE:  MOVWF  77
04BF:  BCF    0B.7
04C0:  MOVLW  01
04C1:  BSF    03.6
04C2:  MOVWF  0D
04C3:  BCF    03.6
04C4:  MOVF   2C,W
04C5:  BSF    03.6
04C6:  MOVWF  0C
04C7:  BSF    03.5
04C8:  BCF    0C.7
04C9:  BSF    0C.2
04CA:  MOVLW  55
04CB:  MOVWF  0D
04CC:  MOVLW  AA
04CD:  MOVWF  0D
04CE:  BSF    0C.1
04CF:  BTFSC  0C.1
04D0:  GOTO   4CF
04D1:  BCF    0C.2
04D2:  MOVF   77,W
04D3:  BCF    03.5
04D4:  BCF    03.6
04D5:  IORWF  0B,F
....................        
....................       lcd_putc("\f"); 
04D6:  MOVLW  5C
04D7:  BSF    03.6
04D8:  MOVWF  0D
04D9:  MOVLW  00
04DA:  MOVWF  0F
04DB:  BCF    03.6
04DC:  CALL   1C1
....................       lcd_gotoxy(1, 1); 
04DD:  MOVLW  01
04DE:  MOVWF  3A
04DF:  MOVWF  3B
04E0:  CALL   183
....................       printf(lcd_putc, "Nhiet do: %d", temp); 
04E1:  MOVLW  5D
04E2:  BSF    03.6
04E3:  MOVWF  0D
04E4:  MOVLW  00
04E5:  MOVWF  0F
04E6:  BCF    03.0
04E7:  MOVLW  0A
04E8:  BCF    03.6
04E9:  MOVWF  33
04EA:  GOTO   323
04EB:  MOVF   32,W
04EC:  MOVWF  33
04ED:  MOVLW  18
04EE:  MOVWF  34
04EF:  GOTO   391
....................        
....................       lcd_gotoxy(1, 2); 
04F0:  MOVLW  01
04F1:  MOVWF  3A
04F2:  MOVLW  02
04F3:  MOVWF  3B
04F4:  CALL   183
....................       if (fixCounter > 10) { 
04F5:  MOVF   2C,W
04F6:  SUBLW  0A
04F7:  BTFSC  03.0
04F8:  GOTO   501
....................          lcd_putc("! CAN BAO TRI !"); 
04F9:  MOVLW  64
04FA:  BSF    03.6
04FB:  MOVWF  0D
04FC:  MOVLW  00
04FD:  MOVWF  0F
04FE:  BCF    03.6
04FF:  CALL   1C1
....................       } else { 
0500:  GOTO   506
....................          printf(lcd_putc, "%02U", fixCounter); 
0501:  MOVF   2C,W
0502:  MOVWF  33
0503:  MOVLW  01
0504:  MOVWF  34
0505:  GOTO   3EA
....................       } 
....................        
....................       if(temp > 50 || turnLed){ 
0506:  BTFSC  32.7
0507:  GOTO   50C
0508:  MOVF   32,W
0509:  SUBLW  32
050A:  BTFSS  03.0
050B:  GOTO   50E
050C:  BTFSS  2B.0
050D:  GOTO   55E
....................          output_high(pin_D0); 
050E:  BSF    03.5
050F:  BCF    08.0
0510:  BCF    03.5
0511:  BSF    08.0
....................          while(counter < 624){ 
0512:  MOVF   31,W
0513:  SUBLW  02
0514:  BTFSS  03.0
0515:  GOTO   536
0516:  BTFSS  03.2
0517:  GOTO   51C
0518:  MOVF   30,W
0519:  SUBLW  6F
051A:  BTFSS  03.0
051B:  GOTO   536
....................          set_pwm1_duty(counter); 
051C:  MOVF   31,W
051D:  MOVWF  79
051E:  MOVF   30,W
051F:  MOVWF  78
0520:  RRF    79,F
0521:  RRF    78,F
0522:  RRF    79,F
0523:  RRF    78,F
0524:  RRF    79,F
0525:  MOVF   78,W
0526:  MOVWF  15
0527:  RRF    79,F
0528:  RRF    79,W
0529:  ANDLW  30
052A:  MOVWF  77
052B:  MOVF   17,W
052C:  ANDLW  CF
052D:  IORWF  77,W
052E:  MOVWF  17
....................          counter++; 
052F:  INCF   30,F
0530:  BTFSC  03.2
0531:  INCF   31,F
....................          delay_ms(1); 
0532:  MOVLW  01
0533:  MOVWF  3A
0534:  CALL   06C
0535:  GOTO   512
....................          } 
....................          delay_ms(100); 
0536:  MOVLW  64
0537:  MOVWF  3A
0538:  CALL   06C
....................          while(counter > 0){ 
0539:  MOVF   30,F
053A:  BTFSS  03.2
053B:  GOTO   53F
053C:  MOVF   31,F
053D:  BTFSC  03.2
053E:  GOTO   55A
....................             set_pwm1_duty(counter); 
053F:  MOVF   31,W
0540:  MOVWF  79
0541:  MOVF   30,W
0542:  MOVWF  78
0543:  RRF    79,F
0544:  RRF    78,F
0545:  RRF    79,F
0546:  RRF    78,F
0547:  RRF    79,F
0548:  MOVF   78,W
0549:  MOVWF  15
054A:  RRF    79,F
054B:  RRF    79,W
054C:  ANDLW  30
054D:  MOVWF  77
054E:  MOVF   17,W
054F:  ANDLW  CF
0550:  IORWF  77,W
0551:  MOVWF  17
....................             counter--; 
0552:  MOVF   30,W
0553:  BTFSC  03.2
0554:  DECF   31,F
0555:  DECF   30,F
....................             delay_ms(1); 
0556:  MOVLW  01
0557:  MOVWF  3A
0558:  CALL   06C
0559:  GOTO   539
....................          } 
....................          delay_ms(100); 
055A:  MOVLW  64
055B:  MOVWF  3A
055C:  CALL   06C
....................       }else{ 
055D:  GOTO   562
....................          output_low(pin_D0); 
055E:  BSF    03.5
055F:  BCF    08.0
0560:  BCF    03.5
0561:  BCF    08.0
....................       } 
0562:  GOTO   482
....................              
....................        
.................... //!      delay_ms(200); 
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
0563:  SLEEP

Configuration Fuses:
   Word  1: 2F42   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
